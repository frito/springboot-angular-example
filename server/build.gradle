import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

}

plugins {
  id 'org.hidetake.swagger.generator' version '2.9.0'
  id 'org.springframework.boot' version '2.1.3.RELEASE'
  id 'com.bmuschko.docker-spring-boot-application' version '4.6.2'
}

repositories {
  mavenCentral()
  jcenter()
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'

dependencies {

  //spring-boot
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'io.jsonwebtoken:jjwt:0.9.0'

  compile 'io.swagger:swagger-annotations:1.5.10'
  swaggerCodegen 'io.swagger:swagger-codegen-cli:2.3.0'

  testCompile 'org.springframework.boot:spring-boot-devtools'
  testCompile 'org.springframework.boot:spring-boot-starter-test'

}


swaggerSources {
  restserver {
    inputFile = project(':server').file('src/main/resources/example.yaml')
    code {
      language = 'spring'
      components = ['models', 'apis']
      additionalProperties = [interfaceOnly:'true']
      rawOptions = ['--api-package=org.example.server.api', '--model-package=org.example.server.model']
    }
  }
}

springBoot {
  mainClassName = 'org.example.server.Application'
}
bootRun {
  sourceResources sourceSets.main
  classpath = sourceSets.test.runtimeClasspath

}

compileJava.dependsOn swaggerSources.restserver.code
sourceSets.main.java.srcDir "${swaggerSources.restserver.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.restserver.code.outputDir}/src/main/resources"

classes.dependsOn tasks.generateSwaggerCode

bootRun.dependsOn bootJar, project(':ngclient').buildClientDev
jar.dependsOn bootJar



docker {
  registryCredentials {
    username = System.getProperty('docker.username')
    password = System.getProperty('docker.password')
    email = System.getProperty('docker.email')
  }
  springBootApplication {
    baseImage = 'openjdk:8-alpine'
    ports = [8080]
    tag = "markusoley/springboot-angular-example:${jar.archiveVersion.get()}"
  }
}
dockerBuildImage.dependsOn classes, bootJar, project(':ngclient').buildClient


clean.doFirst {
  delete "${project.file('src/main/resources/static')}"
}

tasks.distZip.onlyIf {false}





